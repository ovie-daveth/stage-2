const fs = require('fs');
const path = require('path');
const countryRepository = require('./countryRepository');

async function generateSummaryImage() {
  try {
    const count = await countryRepository.getCount();
    const topCountries = await countryRepository.getTopCountriesByGDP(5);
    const lastRefreshed = await countryRepository.getLastRefreshedAt();

    // Generate SVG content
    const svgContent = `<?xml version="1.0" encoding="UTF-8"?>
<svg width="800" height="600" xmlns="http://www.w3.org/2000/svg">
  <!-- Background -->
  <rect width="800" height="600" fill="#1a1a2e"/>
  
  <!-- Title -->
  <text x="400" y="50" font-family="Arial, sans-serif" font-size="36" font-weight="bold" fill="#fff" text-anchor="middle">
    Country Currency Exchange Summary
  </text>
  
  <!-- Stats -->
  <text x="400" y="100" font-family="Arial, sans-serif" font-size="24" fill="#fff" text-anchor="middle">
    Total Countries: ${count}
  </text>
  
  <text x="400" y="130" font-family="Arial, sans-serif" font-size="18" fill="#fff" text-anchor="middle">
    Last Refreshed: ${lastRefreshed || 'Never'}
  </text>
  
  <!-- Top countries header -->
  <text x="400" y="180" font-family="Arial, sans-serif" font-size="20" font-weight="bold" fill="#fff" text-anchor="middle">
    Top 5 Countries by Estimated GDP
  </text>
  
  <!-- Top countries list -->
  ${topCountries.map((country, index) => {
    const gdp = country.estimated_gdp 
      ? `$${country.estimated_gdp.toLocaleString('en-US', { maximumFractionDigits: 2 })}`
      : 'N/A';
    return `<text x="400" y="${220 + index * 30}" font-family="Arial, sans-serif" font-size="16" fill="#fff" text-anchor="middle">
      ${index + 1}. ${country.name}: ${gdp}
    </text>`;
  }).join('')}
  
  <!-- Footer -->
  <text x="400" y="580" font-family="Arial, sans-serif" font-size="14" fill="#888" text-anchor="middle">
    Generated by Country Currency Exchange API
  </text>
</svg>`;

    // Save SVG
    const cacheDir = path.join(__dirname, '..', 'cache');
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }

    const imagePath = path.join(cacheDir, 'summary.svg');
    fs.writeFileSync(imagePath, svgContent);

    return imagePath;
  } catch (error) {
    console.error('Error generating summary image:', error);
    throw error;
  }
}

function getSummaryImagePath() {
  const imagePath = path.join(__dirname, '..', 'cache', 'summary.svg');
  return fs.existsSync(imagePath) ? imagePath : null;
}

module.exports = {
  generateSummaryImage,
  getSummaryImagePath
};

